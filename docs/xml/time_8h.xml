<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="time_8h" kind="file" language="C++">
    <compoundname>time.h</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">ostream</includes>
    <includes local="no">ratio</includes>
    <includes refid="port_8h" local="yes">dsfmapping/common/port.h</includes>
    <incdepgraph>
      <node id="286">
        <label>boost/iostreams/device/back_inserter.hpp</label>
      </node>
      <node id="287">
        <label>boost/iostreams/filter/gzip.hpp</label>
      </node>
      <node id="281">
        <label>/home/dexin/code/space_ros/venus_ws/DsFMapping/dsfmapping/common/time.h</label>
        <link refid="time.h"/>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
      </node>
      <node id="290">
        <label>cmath</label>
      </node>
      <node id="291">
        <label>string</label>
      </node>
      <node id="289">
        <label>cinttypes</label>
      </node>
      <node id="285">
        <label>dsfmapping/common/port.h</label>
        <link refid="port_8h"/>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
      </node>
      <node id="283">
        <label>ostream</label>
      </node>
      <node id="284">
        <label>ratio</label>
      </node>
      <node id="282">
        <label>chrono</label>
      </node>
      <node id="288">
        <label>boost/iostreams/filtering_stream.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_ds_f_mapping_1_1common_1_1_universal_time_scale_clock" prot="public">DsFMapping::common::UniversalTimeScaleClock</innerclass>
    <innernamespace refid="namespace_ds_f_mapping">DsFMapping</innernamespace>
    <innernamespace refid="namespace_ds_f_mapping_1_1common">DsFMapping::common</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>Authors<sp/>DustinKsi@<sp/>Youibot<sp/>2019.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ratio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="port_8h" kindref="compound">dsfmapping/common/port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_ds_f_mapping" kindref="compound">DsFMapping</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">common<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">constexpr<sp/>int64<sp/>kUtsEpochOffsetFromUnixEpochInSeconds<sp/>=<sp/>(719162ll<sp/>*<sp/>24ll<sp/>*<sp/>60ll<sp/>*<sp/>60ll);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="struct_ds_f_mapping_1_1common_1_1_universal_time_scale_clock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ds_f_mapping_1_1common_1_1_universal_time_scale_clock" kindref="compound">UniversalTimeScaleClock</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rep<sp/>=<sp/>int64;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>period<sp/>=<sp/>std::ratio&lt;1,<sp/>10000000&gt;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>std::chrono::duration&lt;rep,<sp/>period&gt;;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>time_point<sp/>=<sp/>std::chrono::time_point&lt;UniversalTimeScaleClock&gt;;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_steady<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Represents<sp/>Universal<sp/>Time<sp/>Scale<sp/>durations<sp/>and<sp/>timestamps<sp/>which<sp/>are<sp/>64-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integers<sp/>representing<sp/>the<sp/>100<sp/>nanosecond<sp/>ticks<sp/>since<sp/>the<sp/>Epoch<sp/>which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>January<sp/>1,<sp/>1<sp/>at<sp/>the<sp/>start<sp/>of<sp/>day<sp/>in<sp/>UTC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Duration<sp/>=<sp/>UniversalTimeScaleClock::duration;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Time<sp/>=<sp/>UniversalTimeScaleClock::time_point;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convenience<sp/>functions<sp/>to<sp/>create<sp/>common::Durations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">Duration<sp/>FromSeconds(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">Duration<sp/>FromMilliseconds(int64<sp/>milliseconds);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>given<sp/>duration<sp/>in<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ToSeconds(Duration<sp/>duration);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ToSeconds(std::chrono::steady_clock::duration<sp/>duration);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>time<sp/>from<sp/>a<sp/>Universal<sp/>Time<sp/>Scale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">Time<sp/>FromUniversal(int64<sp/>ticks);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Outputs<sp/>the<sp/>Universal<sp/>Time<sp/>Scale<sp/>timestamp<sp/>for<sp/>a<sp/>given<sp/>Time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">int64<sp/>ToUniversal(Time<sp/>time);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>logging<sp/>and<sp/>unit<sp/>tests,<sp/>outputs<sp/>the<sp/>timestamp<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/>Time<sp/>time);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CPU<sp/>time<sp/>consumed<sp/>by<sp/>the<sp/>thread<sp/>so<sp/>far,<sp/>in<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GetThreadCpuTimeSeconds();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>DsFMapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>$!<sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#<sp/><sp/>*<sp/><sp/>;;#o*&amp;&amp;;;<sp/>;;<sp/>$*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>##$<sp/><sp/>oo$#####**<sp/><sp/>;##o</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>$$<sp/>*#o###<sp/>#;;#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#;<sp/><sp/>#&amp;<sp/>####;<sp/>#;<sp/><sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>;#<sp/><sp/><sp/><sp/><sp/>#&amp;<sp/><sp/>###<sp/><sp/>#;<sp/><sp/><sp/><sp/>*#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>&amp;$<sp/><sp/>&amp;#<sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>o#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>*$<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>$!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>;o<sp/><sp/><sp/><sp/><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>$<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>$<sp/><sp/><sp/><sp/><sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$<sp/><sp/><sp/><sp/><sp/>o</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/><sp/><sp/>o</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dexin/code/space_ros/venus_ws/DsFMapping/dsfmapping/common/time.h"/>
  </compounddef>
</doxygen>
